# -*- coding: utf-8 -*-
"""Streamlit Data Science.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mrKrABap7s0bFjrg9KVSSs9_JszYZa61
"""

#!pip install xgboost

import streamlit as st
import numpy as np
import pandas as pd
import pickle
from xgboost import XGBRegressor

load_model = pickle.load(open('pld_estate_prediction_model.pkl', 'rb'))

def predict_price(apartment_type, square_meters, construction_year,
                  floor_number, district, construction_type,
                  floor, level_of_completion):

    # Prepare input features as a DataFrame
    input_data = x = np.zeros(len(features.columns))

    district_index = np.where(features.columns == district)[0][0]
    costruction_type_index = np.where(features.columns == construction_type)[0][0]
    floor_index = np.where(features.columns == floor)[0][0]
    completion_index = np.where(features.columns == level_of_completion)[0][0]

    input_data[0] = apartment_type
    input_data[1] = square_meters
    input_data[2] = construction_year
    input_data[3] = floor_number
    input_data[district_index] = 1
    input_data[costruction_type_index] = 1
    input_data[floor_index] = 1
    input_data[completion_index] = 1


    # Make prediction
    prediction = load_model.predict([input_data])[0]

    return prediction

features_cols = ['apartment type', 'square meters', 'construction year', 'floor number',
       'district_Belomorski', 'district_Central', 'district_Gagarin',
       'district_Hristo Smirnenski', 'district_Judicial',
       'district_Kamenitza 1', 'district_Kamenitza 2', 'district_Komatevo',
       'district_Kurshiyaka', 'district_Marasha', 'district_Ostromila',
       'district_Proslav', 'district_Southern', 'district_Sunrise',
       'district_Thrace', 'district_Western', 'district_Youth hill',
       'construction type_ Panel', 'construction type_Bricks',
       'construction type_Formwork', 'construction type_Joist', 'floor_Attic',
       'floor_Basement', 'floor_First', 'floor_Ground floor', 'floor_Last',
       'floor_Not last', 'floor_Unknown', 'level of completion_In a project',
       'level of completion_In construction', 'level of completion_Unknown']

features = pd.DataFrame(columns = features_cols)

# Streamlit UI
st.title("Real Estate Price Prediction App")

# Input for numerical features
apartment_type = st.number_input("Enter Numerical Feature 1:", min_value=1)
square_meters = st.number_input("Enter Numerical Feature 2:", min_value=20)
construction_year = st.number_input("Enter Numerical Feature 3:", min_value=1886)
floor_number = st.number_input("Enter Numerical Feature 3:", min_value=1)
# Dropdowns for categorical features
# district = st.selectbox('Select district:', features.columns[features.columns.str.contains("district")].values)
# construction_type = st.selectbox('Select Construction type:', features.columns[features.columns.str.contains("construction type")].values)
# floor = st.selectbox('Select Floor type:', features.columns[features.columns.str.contains("floor")].values)
# level_of_completion = st.selectbox('Select Level of completion:', features.columns[features.columns.str.contains("level of completion")].values)

if st.button("Predict Price"):
    predicted_price = predict_price(apartment_type, square_meters, construction_year,
                                    floor_number, district, construction_type, floor, level_of_completion)

    st.success(f"Predicted Price: ${predicted_price:,.2f}")
